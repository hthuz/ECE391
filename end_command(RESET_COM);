[1mdiff --git a/student-distrib/lib.c b/student-distrib/lib.c[m
[1mindex 1a7c3fb..593c2d2 100644[m
[1m--- a/student-distrib/lib.c[m
[1m+++ b/student-distrib/lib.c[m
[36m@@ -34,7 +34,9 @@[m [mvoid clear(void)[m
  * Function: Clears video memory */[m
 void set_background_green(int32_t x, int32_t y)[m
 {[m
[32m+[m[32m    // terminal_switch(cur_tid);[m
     *(uint8_t *)(video_mem + ((NUM_COLS * y + x) << 1) + 1) = 0x30;[m
[32m+[m[32m    // terminal_switch(running_tid);[m
 }[m
 [m
 /* void clear(void);[m
[36m@@ -43,7 +45,9 @@[m [mvoid set_background_green(int32_t x, int32_t y)[m
  * Function: Clears video memory */[m
 void set_background_black(int32_t x, int32_t y)[m
 {[m
[32m+[m[32m    // terminal_switch(cur_tid);[m
     *(uint8_t *)(video_mem + ((NUM_COLS * y + x) << 1) + 1) = ATTRIB;[m
[32m+[m[32m    // terminal_switch(running_tid);[m
 }[m
 [m
 /* Standard printf().[m
[1mdiff --git a/student-distrib/mouse.c b/student-distrib/mouse.c[m
[1mindex 0522a3d..fcb36da 100644[m
[1m--- a/student-distrib/mouse.c[m
[1m+++ b/student-distrib/mouse.c[m
[36m@@ -39,17 +39,13 @@[m [mvoid write_keyboard_port(uint8_t data){[m
 [m
 [m
 void send_command(uint8_t command){[m
[31m-    // Sending a command must be preceded by sending 0xD4[m
[31m-    uint8_t data;[m
     wait_output();[m
[31m-    outb(0xD4,MOUSE_PORT);[m
[31m-[m
[32m+[m[32m    outb(0xd4,MOUSE_PORT);[m
     wait_output();[m
     outb(command,KEY_PORT);[m
[31m-    mouse_ack();[m
 }[m
 /* [m
[31m- *  wait_input()[m
[32m+[m[32m *  wait_port()[m
  *  DESCRIPTION: All output to port 0x60 or 0x64 [m
  *              must be preceded by waiting for bit 1 (value=2) [m
  *              of port 0x64 to become clear. Similarly, [m
[36m@@ -63,14 +59,15 @@[m [mvoid send_command(uint8_t command){[m
  */[m
 void wait_input(){[m
     while(1){[m
[31m-        // for bit 0[m
[32m+[m[32m        // for bit 1[m
         if ( (inb(MOUSE_PORT)& 0x01) !=0 ) break;[m
     }[m
[32m+[m[32m    // printf("wait input success\n");[m
 }[m
 [m
 [m
 /* [m
[31m- *  wait_output()[m
[32m+[m[32m *  wait_port()[m
  *  DESCRIPTION: All output to port 0x60 or 0x64 [m
  *              must be preceded by waiting for bit 1 (value=2) [m
  *              of port 0x64 to become clear. Similarly, [m
[36m@@ -83,23 +80,17 @@[m [mvoid wait_input(){[m
  *  SIDE EFFECTS: [m
  */[m
 void wait_output(){[m
[31m-[m
[31m-  // Wait until bit 1 becomes 0[m
     while(1){[m
[31m-        // for bit 1[m
[32m+[m[32m        // for bit 2[m
         if ((inb(MOUSE_PORT)& 0x02)!=1) break;[m
     }[m
[31m-    printf("loop over\n");[m
[31m-}[m
[31m-[m
[31m-void mouse_ack(){[m
[31m-    while(inb(KEY_PORT) != MOUSE_ACK);[m
[32m+[m[32m    // printf("wait output success\n");[m
 }[m
 [m
 [m
 /* [m
  *  mouse_init()[m
[31m- *  DESCRIPTION: initialize mouse[m
[32m+[m[32m *  DESCRIPTION: init_mouse[m
  *  INPUTS: none[m
  *  OUTPUTS: none[m
  *  RETURN VALUE: none[m
[36m@@ -107,51 +98,22 @@[m [mvoid mouse_ack(){[m
  */[m
 void mouse_init(){[m
     // reset[m
[31m-[m
[31m-    // Set Compag Status/Enable IRQ12[m
[31m-    // Send "Get Compaq Status Byte"[m
[31m-    wait_output();[m
[31m-    outb(0x20,MOUSE_PORT);[m
[31m-[m
[31m-    // Modify status byte[m
[31m-    uint8_t status;[m
[31m-    status = inb(KEY_PORT);[m
[31m-    // Set bit 1 to enable IRQ 12[m
[31m-    status |= 0x02;[m
[31m-    // Clear bit 5 to disable Mouse Clock[m
[31m-    status &= (~0x20);[m
[31m-[m
[31m-    // Send "Set Compaq Status"[m
[31m-    wait_output();[m
[31m-    outb(0x60,MOUSE_PORT);[m
[31m-    wait_output();[m
[31m-    outb(status,KEY_PORT);[m
[31m-[m
[31m-    send_command(0xf4);[m
[31m-[m
[31m-[m
[31m-[m
[31m-    /*[m
[32m+[m[32m    send_command(RESET_COM);[m
     // Set Compaq Status[m
     write_mouse_port(0x20);[m
     // Very next byte returned should be the Status byte, [m
     // |Y overflow	|X overflow	 |Y sign bit  |X sign bit	[m
[31m-    // |Always 1	  |Middle Btn	 |Right Btn	  |Left Btn[m
[32m+[m[32m    // |Always 1	|Middle Btn	 |Right Btn	  |Left Btn[m
     uint8_t status = read_keyboard_port();[m
     status = ((status | 0x02 ) & MASK_THIRD );  // magic number for set status[m
     // write status[m
     write_mouse_port(KEY_PORT);[m
     write_keyboard_port(status);[m
 [m
[31m-    */[m
[31m-[m
[31m-    // Enable mouse to send movement packet[m
[32m+[m[32m    // mouse send packets[m
[32m+[m[32m    send_command(PACKET_STR_COM);[m
 [m
     set_background_green(mouse_x,mouse_y);[m
[31m-[m
[31m-    set_background_green(40,12);[m
[31m-[m
[31m-    [m
     // enable IRQ12[m
     enable_irq(MOUSE_IRQ);[m
 }[m
[36m@@ -159,10 +121,8 @@[m [mvoid mouse_init(){[m
 [m
 [m
 void mouse_handler(){[m
[31m-    printf("call handler\n");[m
[32m+[m[32m    // printf("call handler\n");[m
     send_eoi(MOUSE_IRQ);[m
[31m-    return;[m
[31m-[m
     int32_t x_move,y_move;[m
     uint8_t packet = read_keyboard_port();[m
     uint8_t y_over = ( packet & GET_FIRST) ;[m
[36m@@ -170,6 +130,8 @@[m [mvoid mouse_handler(){[m
     uint8_t y_sign = ( packet & GET_THIRD) ;[m
     uint8_t x_sign = ( packet & GET_FOURTH) ;[m
     uint8_t al_one = ( packet & GET_FIFTH) ;[m
[32m+[m[32m    // uint8_t m_button = ( packet & GET_SIXTH) ;[m
[32m+[m[32m    // uint8_t r_button = ( packet & GET_SEVENTH) ;[m
     uint8_t l_button = ( packet & GET_LAST) ;[m
 [m
     if ( x_over == GET_SECOND || y_over == GET_FIRST || al_one == 0)  return;[m
[36m@@ -197,9 +159,14 @@[m [mvoid mouse_handler(){[m
         set_background_green(mouse_x,mouse_y);[m
         set_background_black(previous_x,previous_y);[m
     }[m
[32m+[m[32m    // set_background_black(previous_x,previous_y);[m
     previous_x = mouse_x;[m
     previous_y = mouse_y;[m
[31m-[m
[32m+[m[32m    // set_background_black(previous_x,previous_y);[m
[32m+[m[32m    // if ( r_button == GET_SEVENTH )[m[41m [m
[32m+[m[32m    //     terminal_switch(0);[m
[32m+[m[32m    // if ( m_button == GET_SIXTH)[m[41m [m
[32m+[m[32m    //     terminal_switch(1);[m
     if ( l_button == GET_LAST ) {[m
         set_background_black(mouse_x,mouse_y);[m
         terminal_switch(0);[m
[1mdiff --git a/student-distrib/mouse.h b/student-distrib/mouse.h[m
[1mindex df2e025..fa33b9c 100644[m
[1m--- a/student-distrib/mouse.h[m
[1m+++ b/student-distrib/mouse.h[m
[36m@@ -6,11 +6,8 @@[m
 [m
 #define MOUSE_PORT 0x64[m
 #define MOUSE_IRQ 12[m
[31m-#define RESET_CMD 0xff[m
[31m-#define ENABLE_PACKET_STREM_CMD 0xf4[m
[31m-#define MOUSE_ACK 0xFA[m
[31m-[m
[31m-[m
[32m+[m[32m#define RESET_COM 0xff[m
[32m+[m[32m#define PACKET_STR_COM 0xf4[m
 #define MASK_THIRD 0xdf[m
 #define SLOW_RATE  6[m
 #define WIDTH   80[m
[36m@@ -39,7 +36,6 @@[m [mvoid write_mouse_port(uint8_t data);[m
 void write_keyboard_port(uint8_t data);[m
 void send_command(uint8_t command);[m
 void wait_input();[m
[31m-void mouse_ack();[m
 void wait_output();[m
 [m
 #endif /* _MOUSE_H*/[m
[1mdiff --git a/student-distrib/schedule.c b/student-distrib/schedule.c[m
[1mindex ec2b276..ac7264c 100644[m
[1m--- a/student-distrib/schedule.c[m
[1m+++ b/student-distrib/schedule.c[m
[36m@@ -84,6 +84,7 @@[m [mvoid task_switch()[m
   if(term_num == 1)[m
     return;[m
 [m
[32m+[m[32m  cli();[m
   termin_t* curr_running_term;[m
   termin_t* next_term;[m
   int32_t next_pid;[m
[36m@@ -127,13 +128,14 @@[m [mvoid task_switch()[m
   // Use next task's EBP,ESP[m
   uint32_t next_ebp = next_pcb->saved_ebp;[m
   uint32_t next_esp = next_pcb->saved_esp;[m
[31m-  asm volatile([m
[31m-      "movl %0, %%esp;"[m
[31m-      "movl %1, %%ebp;"[m
[31m-      :[m
[31m-      :"r"(next_esp), "r"(next_ebp)[m
[31m-  );[m
[31m-  return;[m
[32m+[m[32m    asm volatile([m
[32m+[m[32m        "movl %0, %%esp;"[m
[32m+[m[32m        "movl %1, %%ebp;"[m
[32m+[m[32m        :[m
[32m+[m[32m        :"r"(next_esp), "r"(next_ebp)[m
[32m+[m[32m    );[m
[32m+[m[32m  sti();[m
[32m+[m
 [m
 }[m
 [m
[1mdiff --git a/student-distrib/syscall.c b/student-distrib/syscall.c[m
[1mindex 5084444..7ddf569 100644[m
[1m--- a/student-distrib/syscall.c[m
[1m+++ b/student-distrib/syscall.c[m
[36m@@ -84,7 +84,6 @@[m [mint32_t halt(uint8_t status)[m
   uint32_t my_esp = parent_pcb->saved_esp;[m
   uint32_t my_ebp = parent_pcb->saved_ebp;[m
   uint32_t result = (uint32_t)status;[m
[31m-  sti();[m
   asm volatile([m
       "movl %%ebx, %%ebp    ;"[m
       "movl %%ecx, %%esp    ;"[m
[36m@@ -94,6 +93,7 @@[m [mint32_t halt(uint8_t status)[m
       :[m
       : "c"(my_esp), "b"(my_ebp), "d"(result)[m
       : "eax", "ebp", "esp");[m
[32m+[m[32m  sti();[m
   return 0;[m
 }[m
 [m
[36m@@ -110,13 +110,14 @@[m [mint32_t halt(uint8_t status)[m
  */[m
 int32_t execute(const uint8_t *command)[m
 {[m
[31m-  cli();[m
   pcb_t *pcb;               // PCB of program[m
   int32_t parent_pid;       // Record of parent id[m
   int32_t new_pid;          // new pid for this newly executed program[m
   uint8_t usr_cmd[ARG_LEN];[m
   uint8_t usr_args[ARG_LEN];[m
   termin_t* cur_term = get_terminal(cur_tid);[m
[32m+[m[32m  cli();[m
[32m+[m
   if(parse_args(command, usr_cmd, usr_args) == -1)[m
   {[m
     sti();[m
[1mdiff --git a/student-distrib/terminal.c b/student-distrib/terminal.c[m
[1mindex 2c0c17e..ba5ee69 100644[m
[1m--- a/student-distrib/terminal.c[m
[1m+++ b/student-distrib/terminal.c[m
[36m@@ -63,16 +63,17 @@[m [mint32_t terminal_read(int32_t fd, void *buf, int32_t nbytes)[m
         return SYSCALL_FAIL;[m
     termin_t* running_term = get_terminal(running_tid);[m
 [m
[31m-    // Do nothing until enter is pressed[m
[32m+[m[32m    // do nothing until enter is pressed[m
     while (running_term->enter_pressed == 0);[m
[31m-[m
[32m+[m[32m    cli();[m
     int i;[m
     int j;[m
     char* charbuf = buf;[m
[32m+[m[32m    // termin_t* cur_term = get_terminal(cur_tid);[m
     if (nbytes < running_term->kb_buf_length + 1)[m
         return SYSCALL_FAIL;[m
 [m
[31m-    // Empty buf first[m
[32m+[m[32m    // empty buf first[m
     for (i = 0; i <= nbytes; i++)[m
         charbuf[i] = '\0';[m
 [m
[36m@@ -94,6 +95,7 @@[m [mint32_t terminal_read(int32_t fd, void *buf, int32_t nbytes)[m
         running_term->kb_buf[j] = '\0';[m
     running_term->kb_buf_length = 0;[m
     running_term->enter_pressed = 0;[m
[32m+[m[32m    sti();[m
 [m
     return i ;[m
 }[m
[36m@@ -120,6 +122,19 @@[m [mint32_t terminal_write(int32_t fd, const void *buf, int32_t nbytes)[m
   int i;[m
   char *charbuf = (char *)buf;[m
 [m
[32m+[m[32m  /*[m
[32m+[m[32m  if(cur_tid == running_tid)[m
[32m+[m[32m  {[m
[32m+[m[32m    for (i = 0; i < nbytes; i++)[m
[32m+[m[32m      putc(charbuf[i]);[m
[32m+[m[32m  }[m
[32m+[m[32m  else[m
[32m+[m[32m  {[m
[32m+[m[32m    for (i = 0; i < nbytes; i++)[m
[32m+[m[32m      terminal_putc(charbuf[i],running_tid);[m
[32m+[m[32m  }[m
[32m+[m[32m  */[m
[32m+[m
   for(i = 0; i < nbytes; i++)[m
   {[m
     if(cur_tid == running_tid)[m
[36m@@ -127,8 +142,8 @@[m [mint32_t terminal_write(int32_t fd, const void *buf, int32_t nbytes)[m
     else[m
       terminal_putc(charbuf[i],running_tid);[m
   }[m
[31m-  sti();[m
 [m
[32m+[m[32m  sti();[m
   return nbytes;[m
 }[m
 [m
[36m@@ -225,6 +240,8 @@[m [mvoid terminal_switch(int32_t new_tid)[m
   if (cur_tid == new_tid)[m
     return;[m
 [m
[32m+[m[41m  [m
[32m+[m[32m  pcb_t* cur_pcb = get_pcb(cur_pid);[m
   termin_t* cur_term = get_terminal(cur_tid);[m
   termin_t* new_term = get_terminal(new_tid);[m
 [m
